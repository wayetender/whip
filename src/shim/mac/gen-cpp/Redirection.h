/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Redirection_H
#define Redirection_H

#include <thrift/TDispatchProcessor.h>
#include "clientprotocol_types.h"

namespace ClientProxy {

class RedirectionIf {
 public:
  virtual ~RedirectionIf() {}
  virtual void get_redirection_info(RedirectionInfo& _return, const std::string& address, const int32_t port) = 0;
};

class RedirectionIfFactory {
 public:
  typedef RedirectionIf Handler;

  virtual ~RedirectionIfFactory() {}

  virtual RedirectionIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(RedirectionIf* /* handler */) = 0;
};

class RedirectionIfSingletonFactory : virtual public RedirectionIfFactory {
 public:
  RedirectionIfSingletonFactory(const boost::shared_ptr<RedirectionIf>& iface) : iface_(iface) {}
  virtual ~RedirectionIfSingletonFactory() {}

  virtual RedirectionIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(RedirectionIf* /* handler */) {}

 protected:
  boost::shared_ptr<RedirectionIf> iface_;
};

class RedirectionNull : virtual public RedirectionIf {
 public:
  virtual ~RedirectionNull() {}
  void get_redirection_info(RedirectionInfo& /* _return */, const std::string& /* address */, const int32_t /* port */) {
    return;
  }
};

typedef struct _Redirection_get_redirection_info_args__isset {
  _Redirection_get_redirection_info_args__isset() : address(false), port(false) {}
  bool address;
  bool port;
} _Redirection_get_redirection_info_args__isset;

class Redirection_get_redirection_info_args {
 public:

  Redirection_get_redirection_info_args() : address(), port(0) {
  }

  virtual ~Redirection_get_redirection_info_args() throw() {}

  std::string address;
  int32_t port;

  _Redirection_get_redirection_info_args__isset __isset;

  void __set_address(const std::string& val) {
    address = val;
  }

  void __set_port(const int32_t val) {
    port = val;
  }

  bool operator == (const Redirection_get_redirection_info_args & rhs) const
  {
    if (!(address == rhs.address))
      return false;
    if (!(port == rhs.port))
      return false;
    return true;
  }
  bool operator != (const Redirection_get_redirection_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Redirection_get_redirection_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Redirection_get_redirection_info_pargs {
 public:


  virtual ~Redirection_get_redirection_info_pargs() throw() {}

  const std::string* address;
  const int32_t* port;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Redirection_get_redirection_info_result__isset {
  _Redirection_get_redirection_info_result__isset() : success(false) {}
  bool success;
} _Redirection_get_redirection_info_result__isset;

class Redirection_get_redirection_info_result {
 public:

  Redirection_get_redirection_info_result() {
  }

  virtual ~Redirection_get_redirection_info_result() throw() {}

  RedirectionInfo success;

  _Redirection_get_redirection_info_result__isset __isset;

  void __set_success(const RedirectionInfo& val) {
    success = val;
  }

  bool operator == (const Redirection_get_redirection_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Redirection_get_redirection_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Redirection_get_redirection_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Redirection_get_redirection_info_presult__isset {
  _Redirection_get_redirection_info_presult__isset() : success(false) {}
  bool success;
} _Redirection_get_redirection_info_presult__isset;

class Redirection_get_redirection_info_presult {
 public:


  virtual ~Redirection_get_redirection_info_presult() throw() {}

  RedirectionInfo* success;

  _Redirection_get_redirection_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class RedirectionClient : virtual public RedirectionIf {
 public:
  RedirectionClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  RedirectionClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get_redirection_info(RedirectionInfo& _return, const std::string& address, const int32_t port);
  void send_get_redirection_info(const std::string& address, const int32_t port);
  void recv_get_redirection_info(RedirectionInfo& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RedirectionProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<RedirectionIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (RedirectionProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_get_redirection_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RedirectionProcessor(boost::shared_ptr<RedirectionIf> iface) :
    iface_(iface) {
    processMap_["get_redirection_info"] = &RedirectionProcessor::process_get_redirection_info;
  }

  virtual ~RedirectionProcessor() {}
};

class RedirectionProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  RedirectionProcessorFactory(const ::boost::shared_ptr< RedirectionIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< RedirectionIfFactory > handlerFactory_;
};

class RedirectionMultiface : virtual public RedirectionIf {
 public:
  RedirectionMultiface(std::vector<boost::shared_ptr<RedirectionIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RedirectionMultiface() {}
 protected:
  std::vector<boost::shared_ptr<RedirectionIf> > ifaces_;
  RedirectionMultiface() {}
  void add(boost::shared_ptr<RedirectionIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void get_redirection_info(RedirectionInfo& _return, const std::string& address, const int32_t port) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_redirection_info(_return, address, port);
    }
    ifaces_[i]->get_redirection_info(_return, address, port);
    return;
  }

};

} // namespace

#endif
