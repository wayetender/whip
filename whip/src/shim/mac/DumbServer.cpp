// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "proxy.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace apache::thrift;
using namespace apache::thrift::protocol;
using namespace apache::thrift::transport;
using namespace apache::thrift::server;

using boost::shared_ptr;

using namespace ClientProxy;

class RedirectionHandler : virtual public RedirectionIf {
 public:
  RedirectionHandler() {
  }

  void get_redirection_info(RedirectionInfo& _return, const std::string& address, const int32_t port) {
    //std::cout << "sending do-not-proxy for " << address << ":" << port << std::endl;
    //_return.is_proxied = false;

    _return.is_proxied = true;
    _return.address = "65.55.206.228";
    _return.port = 80;
    std::cout << "redirect to " << _return.address << ":" << _return.port << std::endl;
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<RedirectionHandler> handler(new RedirectionHandler());
  shared_ptr<TProcessor> processor(new RedirectionProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  std::cout << "Responding to redirection requests on port " << port << std::endl;
  server.serve();
  return 0;
}

